name: Release

on:
  push:
    tags:
      - 'v*'

env:
  GO_VERSION: '1.21'

jobs:
  create-release:
    name: 创建发布
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      
    steps:
    - name: 检出代码
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: 生成变更日志
      id: changelog
      run: |
        # 获取上一个标签
        PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
        
        if [ -z "$PREVIOUS_TAG" ]; then
          echo "changelog=首次发布" >> $GITHUB_OUTPUT
        else
          CHANGELOG=$(git log --pretty=format:"- %s" ${PREVIOUS_TAG}..HEAD)
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGELOG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
        fi

    - name: 创建发布
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: FlowSpec CLI ${{ github.ref }}
        body: |
          ## 变更内容
          
          ${{ steps.changelog.outputs.changelog }}
          
          ## 安装方法
          
          ### 下载预构建二进制文件
          
          从下面的资产中下载适合您平台的二进制文件。
          
          ### 使用 go install
          
          ```bash
          go install github.com/your-org/flowspec-cli/cmd/flowspec-cli@${{ github.ref }}
          ```
          
          ## 使用方法
          
          ```bash
          # 查看帮助
          flowspec-cli --help
          
          # 执行对齐验证
          flowspec-cli align --path=./my-project --trace=./traces/run-1.json --output=human
          ```
        draft: false
        prerelease: false

  build-and-upload:
    name: 构建并上传
    runs-on: ubuntu-latest
    needs: create-release
    
    strategy:
      matrix:
        include:
          - goos: linux
            goarch: amd64
          - goos: linux
            goarch: arm64
          - goos: darwin
            goarch: amd64
          - goos: darwin
            goarch: arm64
          - goos: windows
            goarch: amd64

    steps:
    - name: 检出代码
      uses: actions/checkout@v4

    - name: 设置 Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: 获取版本信息
      id: version
      run: |
        VERSION=${GITHUB_REF#refs/tags/}
        COMMIT=$(git rev-parse --short HEAD)
        DATE=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
        
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "commit=$COMMIT" >> $GITHUB_OUTPUT
        echo "date=$DATE" >> $GITHUB_OUTPUT

    - name: 构建二进制文件
      env:
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.goarch }}
      run: |
        BINARY_NAME=flowspec-cli
        if [ "$GOOS" = "windows" ]; then
          BINARY_NAME="${BINARY_NAME}.exe"
        fi
        
        ARCHIVE_NAME="flowspec-cli-${{ steps.version.outputs.version }}-${GOOS}-${GOARCH}"
        
        # 构建时注入版本信息
        go build -ldflags="-s -w -X main.version=${{ steps.version.outputs.version }} -X main.commit=${{ steps.version.outputs.commit }} -X main.date=${{ steps.version.outputs.date }}" -o ${BINARY_NAME} ./cmd/flowspec-cli
        
        # 创建归档
        if [ "$GOOS" = "windows" ]; then
          zip ${ARCHIVE_NAME}.zip ${BINARY_NAME}
          echo "archive=${ARCHIVE_NAME}.zip" >> $GITHUB_ENV
        else
          tar -czf ${ARCHIVE_NAME}.tar.gz ${BINARY_NAME}
          echo "archive=${ARCHIVE_NAME}.tar.gz" >> $GITHUB_ENV
        fi

    - name: 上传发布资产
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: ./${{ env.archive }}
        asset_name: ${{ env.archive }}
        asset_content_type: application/octet-stream