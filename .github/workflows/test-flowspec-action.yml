name: Test FlowSpec Action

on:
  workflow_dispatch:
    inputs:
      test_scenario:
        description: 'Test scenario to run'
        required: true
        default: 'basic'
        type: choice
        options:
        - basic
        - failure
        - cross-platform
  push:
    paths:
    - '.github/actions/flowspec/**'
    - '.github/workflows/test-flowspec-action.yml'
  pull_request:
    paths:
    - '.github/actions/flowspec/**'

jobs:
  test-basic:
    if: github.event.inputs.test_scenario == 'basic' || github.event.inputs.test_scenario == '' || github.event_name != 'workflow_dispatch'
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      
    - name: Create test files
      run: |
        mkdir -p test-data
        
        # Create a simple service spec YAML
        cat > test-data/service-spec.yaml << 'EOF'
        apiVersion: flowspec/v1alpha1
        kind: ServiceSpec
        metadata:
          name: test-service
          version: v1.0.0
        spec:
          endpoints:
            - path: /api/users/{id}
              operations:
                - method: GET
                  responses:
                    statusRanges: ["2xx", "4xx"]
                    aggregation: "range"
                  required:
                    headers: ["authorization"]
                    query: []
                  optional:
                    headers: ["accept-language"]
                    query: ["include"]
        EOF
        
        # Create a simple trace file
        cat > test-data/trace.json << 'EOF'
        {
          "traces": [
            {
              "traceId": "test-trace-1",
              "spans": [
                {
                  "spanId": "span-1",
                  "operationName": "GET /api/users/123",
                  "tags": {
                    "http.method": "GET",
                    "http.url": "/api/users/123",
                    "http.status_code": 200
                  }
                }
              ]
            }
          ]
        }
        EOF
        
    - name: Test FlowSpec Action
      id: test
      uses: ./.github/actions/flowspec
      with:
        path: 'test-data/service-spec.yaml'
        trace: 'test-data/trace.json'
        version: 'latest'
        ci: 'true'
        
    - name: Verify outputs
      run: |
        echo "Result: ${{ steps.test.outputs.result }}"
        echo "Exit code: ${{ steps.test.outputs.exit-code }}"
        echo "Summary JSON: ${{ steps.test.outputs.summary-json }}"
        echo "JUnit XML: ${{ steps.test.outputs.junit-xml }}"

  test-failure-scenario:
    if: github.event.inputs.test_scenario == 'failure'
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      
    - name: Create test files for failure
      run: |
        mkdir -p test-data
        
        # Create an invalid YAML file
        cat > test-data/invalid-spec.yaml << 'EOF'
        invalid: yaml: content:
          - this is not
        valid yaml
        EOF
        
        # Create a simple trace file
        echo '{"traces": []}' > test-data/trace.json
        
    - name: Test FlowSpec Action (expect failure)
      id: test
      continue-on-error: true
      uses: ./.github/actions/flowspec
      with:
        path: 'test-data/invalid-spec.yaml'
        trace: 'test-data/trace.json'
        version: 'latest'
        ci: 'true'
        
    - name: Verify failure handling
      run: |
        echo "Result: ${{ steps.test.outputs.result }}"
        echo "Exit code: ${{ steps.test.outputs.exit-code }}"
        
        # Verify that we got a failure result
        if [ "${{ steps.test.outputs.result }}" != "failure" ]; then
          echo "Expected failure result, got: ${{ steps.test.outputs.result }}"
          exit 1
        fi
        
        # Verify that exit code is not 0
        if [ "${{ steps.test.outputs.exit-code }}" = "0" ]; then
          echo "Expected non-zero exit code, got: ${{ steps.test.outputs.exit-code }}"
          exit 1
        fi
        
        echo "Failure scenario test passed!"

  test-cross-platform:
    if: github.event.inputs.test_scenario == 'cross-platform'
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        
    runs-on: ${{ matrix.os }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      
    - name: Create test files
      shell: bash
      run: |
        mkdir -p test-data
        
        # Create a simple service spec YAML
        cat > test-data/service-spec.yaml << 'EOF'
        apiVersion: flowspec/v1alpha1
        kind: ServiceSpec
        metadata:
          name: test-service
          version: v1.0.0
        spec:
          endpoints:
            - path: /api/health
              operations:
                - method: GET
                  responses:
                    statusCodes: [200]
                    aggregation: "exact"
        EOF
        
        # Create a simple trace file
        echo '{"traces": [{"traceId": "test", "spans": [{"spanId": "1", "operationName": "GET /api/health", "tags": {"http.method": "GET", "http.url": "/api/health", "http.status_code": 200}}]}]}' > test-data/trace.json
        
    - name: Test FlowSpec Action on ${{ matrix.os }}
      uses: ./.github/actions/flowspec
      with:
        path: 'test-data/service-spec.yaml'
        trace: 'test-data/trace.json'
        version: 'latest'
        ci: 'true'

  test-version-pinning:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      
    - name: Create test files
      run: |
        mkdir -p test-data
        echo 'apiVersion: flowspec/v1alpha1' > test-data/service-spec.yaml
        echo 'kind: ServiceSpec' >> test-data/service-spec.yaml
        echo 'spec: {endpoints: []}' >> test-data/service-spec.yaml
        echo '{"traces": []}' > test-data/trace.json
        
    - name: Test with specific version
      uses: ./.github/actions/flowspec
      with:
        path: 'test-data/service-spec.yaml'
        trace: 'test-data/trace.json'
        version: 'v1.0.0'  # This will fail if version doesn't exist, which is expected
        ci: 'true'
      continue-on-error: true  # Allow this to fail since v1.0.0 might not exist yet

  summary:
    needs: [test-basic]
    if: always()
    runs-on: ubuntu-latest
    
    steps:
    - name: Test Summary
      run: |
        echo "## FlowSpec Action Test Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "- **Basic Test**: ${{ needs.test-basic.result }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ needs.test-basic.result }}" = "success" ]; then
          echo "✅ All tests passed!" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ Some tests failed. Check the logs for details." >> $GITHUB_STEP_SUMMARY
        fi